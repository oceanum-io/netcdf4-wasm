// Attribute tests following netcdf4-python patterns

import { Dataset, NetCDF4, Variable, NC_CONSTANTS } from '../index';
import { TestSetup } from '../test-setup';

describe('Attribute Tests', () => {
    let mockMode = false;

    beforeAll(() => {
        TestSetup.setupTestEnvironment();
        mockMode = TestSetup.mockWasmModule();
    });

    afterAll(() => {
        TestSetup.cleanupTestEnvironment();
    });

    describe('Global Attributes', () => {
        test('should set and get global string attributes', async () => {
            const filename = TestSetup.getTestFilename('_attrs_global_str');
            
            if (mockMode) {
                const nc = new NetCDF4(filename, 'w');
                nc.setncattr('title', 'Test Dataset');
                nc.setncattr('institution', 'NetCDF4-WASM Test Suite');
                
                expect(nc.getncattr('title')).toBe('Test Dataset');
                expect(nc.getncattr('institution')).toBe('NetCDF4-WASM Test Suite');
                expect(nc.ncattrs()).toContain('title');
                expect(nc.ncattrs()).toContain('institution');
                return;
            }

            try {
                const nc = await Dataset(filename, 'w');
                
                // Set global string attributes
                nc.setncattr('title', 'Test Dataset');
                nc.setncattr('institution', 'NetCDF4-WASM Test Suite');
                nc.setncattr('source', 'Generated by automated tests');
                nc.setncattr('history', 'Created on ' + new Date().toISOString());
                nc.setncattr('references', 'https://github.com/Unidata/netcdf4-python');
                nc.setncattr('comment', 'This is a test file for attribute handling');
                
                // Get attributes
                expect(nc.getncattr('title')).toBe('Test Dataset');
                expect(nc.getncattr('institution')).toBe('NetCDF4-WASM Test Suite');
                expect(nc.getncattr('source')).toBe('Generated by automated tests');
                expect(nc.getncattr('comment')).toBe('This is a test file for attribute handling');
                
                // Check attribute list
                const attrs = nc.ncattrs();
                expect(attrs).toContain('title');
                expect(attrs).toContain('institution');
                expect(attrs).toContain('source');
                expect(attrs).toContain('history');
                expect(attrs).toContain('references');
                expect(attrs).toContain('comment');
                
                await nc.close();
            } finally {
                TestSetup.cleanupTestFile(filename);
            }
        });

        test('should handle global numeric attributes', async () => {
            const filename = TestSetup.getTestFilename('_attrs_global_num');
            
            if (mockMode) {
                const nc = new NetCDF4(filename, 'w');
                nc.setncattr('version_major', 1);
                nc.setncattr('version_minor', 2);
                nc.setncattr('scale_factor', 0.01);
                
                expect(nc.getncattr('version_major')).toBe(1);
                expect(nc.getncattr('version_minor')).toBe(2);
                expect(nc.getncattr('scale_factor')).toBe(0.01);
                return;
            }

            try {
                const nc = await Dataset(filename, 'w');
                
                // Set numeric attributes
                nc.setncattr('version_major', 1);
                nc.setncattr('version_minor', 2);
                nc.setncattr('patch_level', 3);
                nc.setncattr('scale_factor', 0.01);
                nc.setncattr('add_offset', -273.15);
                nc.setncattr('missing_value', -9999);
                nc.setncattr('valid_min', -100.0);
                nc.setncattr('valid_max', 100.0);
                
                // Get numeric attributes
                expect(nc.getncattr('version_major')).toBe(1);
                expect(nc.getncattr('version_minor')).toBe(2);
                expect(nc.getncattr('patch_level')).toBe(3);
                expect(nc.getncattr('scale_factor')).toBe(0.01);
                expect(nc.getncattr('add_offset')).toBe(-273.15);
                expect(nc.getncattr('missing_value')).toBe(-9999);
                expect(nc.getncattr('valid_min')).toBe(-100.0);
                expect(nc.getncattr('valid_max')).toBe(100.0);
                
                await nc.close();
            } finally {
                TestSetup.cleanupTestFile(filename);
            }
        });

        test('should handle empty and special string attributes', async () => {
            const filename = TestSetup.getTestFilename('_attrs_special_str');
            
            if (mockMode) {
                const nc = new NetCDF4(filename, 'w');
                nc.setncattr('empty_string', '');
                nc.setncattr('whitespace', '   ');
                nc.setncattr('newlines', 'line1\nline2\nline3');
                
                expect(nc.getncattr('empty_string')).toBe('');
                expect(nc.getncattr('whitespace')).toBe('   ');
                expect(nc.getncattr('newlines')).toBe('line1\nline2\nline3');
                return;
            }

            try {
                const nc = await Dataset(filename, 'w');
                
                // Special string cases
                nc.setncattr('empty_string', '');
                nc.setncattr('whitespace', '   ');
                nc.setncattr('newlines', 'line1\nline2\nline3');
                nc.setncattr('unicode', 'Temperature: 25°C');
                nc.setncattr('special_chars', 'Special chars: !@#$%^&*()');
                
                expect(nc.getncattr('empty_string')).toBe('');
                expect(nc.getncattr('whitespace')).toBe('   ');
                expect(nc.getncattr('newlines')).toBe('line1\nline2\nline3');
                expect(nc.getncattr('unicode')).toBe('Temperature: 25°C');
                expect(nc.getncattr('special_chars')).toBe('Special chars: !@#$%^&*()');
                
                await nc.close();
            } finally {
                TestSetup.cleanupTestFile(filename);
            }
        });
    });

    describe('Variable Attributes', () => {
        test('should set and get variable attributes', async () => {
            const filename = TestSetup.getTestFilename('_attrs_var');
            
            if (mockMode) {
                const nc = new NetCDF4(filename, 'w');
                return;
            }

            try {
                const nc = await Dataset(filename, 'w');
                
                await nc.createDimension('time', 10);
                await nc.createDimension('lat', 73);
                await nc.createDimension('lon', 144);
                
                const temp = await nc.createVariable('temperature', 'f4', ['time', 'lat', 'lon']);
                
                // Set variable attributes
                temp.setncattr('long_name', 'Air Temperature');
                temp.setncattr('standard_name', 'air_temperature');
                temp.setncattr('units', 'K');
                temp.setncattr('valid_min', 150.0);
                temp.setncattr('valid_max', 350.0);
                temp.setncattr('_FillValue', -9999.0);
                temp.setncattr('missing_value', -9999.0);
                temp.setncattr('scale_factor', 0.01);
                temp.setncattr('add_offset', 273.15);
                
                // Get variable attributes
                expect(temp.getncattr('long_name')).toBe('Air Temperature');
                expect(temp.getncattr('standard_name')).toBe('air_temperature');
                expect(temp.getncattr('units')).toBe('K');
                expect(temp.getncattr('valid_min')).toBe(150.0);
                expect(temp.getncattr('valid_max')).toBe(350.0);
                expect(temp.getncattr('_FillValue')).toBe(-9999.0);
                expect(temp.getncattr('missing_value')).toBe(-9999.0);
                expect(temp.getncattr('scale_factor')).toBe(0.01);
                expect(temp.getncattr('add_offset')).toBe(273.15);
                
                // Check attribute list
                const attrs = temp.ncattrs();
                expect(attrs).toContain('long_name');
                expect(attrs).toContain('units');
                expect(attrs).toContain('_FillValue');
                expect(attrs.length).toBe(8);
                
                await nc.close();
            } finally {
                TestSetup.cleanupTestFile(filename);
            }
        });

        test('should handle coordinate variable attributes', async () => {
            const filename = TestSetup.getTestFilename('_attrs_coords');
            
            if (mockMode) {
                pending('WASM module not available');
                return;
            }

            try {
                const nc = await Dataset(filename, 'w');
                
                await nc.createDimension('time', 10);
                await nc.createDimension('lat', 73);
                await nc.createDimension('lon', 144);
                
                // Create coordinate variables
                const time_var = await nc.createVariable('time', 'f8', ['time']);
                const lat_var = await nc.createVariable('latitude', 'f4', ['lat']);
                const lon_var = await nc.createVariable('longitude', 'f4', ['lon']);
                
                // Time variable attributes
                time_var.setncattr('standard_name', 'time');
                time_var.setncattr('long_name', 'Time');
                time_var.setncattr('units', 'hours since 1900-01-01 00:00:00');
                time_var.setncattr('calendar', 'gregorian');
                time_var.setncattr('axis', 'T');
                
                // Latitude variable attributes
                lat_var.setncattr('standard_name', 'latitude');
                lat_var.setncattr('long_name', 'Latitude');
                lat_var.setncattr('units', 'degrees_north');
                lat_var.setncattr('axis', 'Y');
                lat_var.setncattr('valid_min', -90.0);
                lat_var.setncattr('valid_max', 90.0);
                
                // Longitude variable attributes
                lon_var.setncattr('standard_name', 'longitude');
                lon_var.setncattr('long_name', 'Longitude');
                lon_var.setncattr('units', 'degrees_east');
                lon_var.setncattr('axis', 'X');
                lon_var.setncattr('valid_min', -180.0);
                lon_var.setncattr('valid_max', 180.0);
                
                // Verify attributes
                expect(time_var.getncattr('units')).toBe('hours since 1900-01-01 00:00:00');
                expect(lat_var.getncattr('units')).toBe('degrees_north');
                expect(lon_var.getncattr('units')).toBe('degrees_east');
                
                expect(lat_var.getncattr('valid_min')).toBe(-90.0);
                expect(lat_var.getncattr('valid_max')).toBe(90.0);
                expect(lon_var.getncattr('valid_min')).toBe(-180.0);
                expect(lon_var.getncattr('valid_max')).toBe(180.0);
                
                await nc.close();
            } finally {
                TestSetup.cleanupTestFile(filename);
            }
        });

        test('should support property-style attribute access', async () => {
            const filename = TestSetup.getTestFilename('_attrs_properties');
            
            if (mockMode) {
                const nc = new NetCDF4(filename, 'w');
                return;
            }

            try {
                const nc = await Dataset(filename, 'w');
                
                await nc.createDimension('x', 10);
                const var_obj = await nc.createVariable('data', 'f4', ['x']);
                
                // Test property-style access
                var_obj.units = 'meters';
                var_obj.long_name = 'Distance measurements';
                var_obj.standard_name = 'distance';
                var_obj.scale_factor = 0.001;
                var_obj.add_offset = 0.0;
                var_obj._FillValue = -999.0;
                
                // Verify property access
                expect(var_obj.units).toBe('meters');
                expect(var_obj.long_name).toBe('Distance measurements');
                expect(var_obj.standard_name).toBe('distance');
                expect(var_obj.scale_factor).toBe(0.001);
                expect(var_obj.add_offset).toBe(0.0);
                expect(var_obj._FillValue).toBe(-999.0);
                
                // Verify these are also accessible via getncattr
                expect(var_obj.getncattr('units')).toBe('meters');
                expect(var_obj.getncattr('long_name')).toBe('Distance measurements');
                expect(var_obj.getncattr('scale_factor')).toBe(0.001);
                
                await nc.close();
            } finally {
                TestSetup.cleanupTestFile(filename);
            }
        });
    });

    describe('Group Attributes', () => {
        test('should handle group-level attributes', async () => {
            const filename = TestSetup.getTestFilename('_attrs_groups');
            
            if (mockMode) {
                const nc = new NetCDF4(filename, 'w');
                const group = nc.createGroup('forecast');
                group.setncattr('description', 'Forecast data group');
                expect(group.getncattr('description')).toBe('Forecast data group');
                return;
            }

            try {
                const nc = await Dataset(filename, 'w');
                
                // Set root group attributes
                nc.setncattr('title', 'Multi-group Dataset');
                nc.setncattr('institution', 'Test Suite');
                
                // Create groups with attributes
                const obs_group = nc.createGroup('observations');
                obs_group.setncattr('description', 'Observational data');
                obs_group.setncattr('source', 'Weather stations');
                obs_group.setncattr('quality_control', 'Level 2');
                
                const forecast_group = nc.createGroup('forecast');
                forecast_group.setncattr('description', 'Forecast data');
                forecast_group.setncattr('model', 'GFS');
                forecast_group.setncattr('resolution', '0.25 degrees');
                forecast_group.setncattr('forecast_hours', 120);
                
                // Verify root attributes
                expect(nc.getncattr('title')).toBe('Multi-group Dataset');
                expect(nc.getncattr('institution')).toBe('Test Suite');
                
                // Verify observation group attributes
                expect(obs_group.getncattr('description')).toBe('Observational data');
                expect(obs_group.getncattr('source')).toBe('Weather stations');
                expect(obs_group.getncattr('quality_control')).toBe('Level 2');
                
                // Verify forecast group attributes
                expect(forecast_group.getncattr('description')).toBe('Forecast data');
                expect(forecast_group.getncattr('model')).toBe('GFS');
                expect(forecast_group.getncattr('resolution')).toBe('0.25 degrees');
                expect(forecast_group.getncattr('forecast_hours')).toBe(120);
                
                // Check attribute lists
                expect(nc.ncattrs()).toContain('title');
                expect(obs_group.ncattrs()).toContain('description');
                expect(forecast_group.ncattrs()).toContain('model');
                
                await nc.close();
            } finally {
                TestSetup.cleanupTestFile(filename);
            }
        });
    });

    describe('Attribute Edge Cases', () => {
        test('should handle undefined and null attributes', async () => {
            const filename = TestSetup.getTestFilename('_attrs_edge_cases');
            
            if (mockMode) {
                const nc = new NetCDF4(filename, 'w');
                expect(nc.getncattr('nonexistent')).toBeUndefined();
                return;
            }

            try {
                const nc = await Dataset(filename, 'w');
                
                // Test getting non-existent attributes
                expect(nc.getncattr('nonexistent')).toBeUndefined();
                
                await nc.createDimension('x', 5);
                const var_obj = await nc.createVariable('test', 'f4', ['x']);
                expect(var_obj.getncattr('nonexistent')).toBeUndefined();
                
                // Test undefined property access
                expect(var_obj.units).toBeUndefined();
                expect(var_obj.long_name).toBeUndefined();
                
                await nc.close();
            } finally {
                TestSetup.cleanupTestFile(filename);
            }
        });

        test('should handle zero and negative numeric attributes', async () => {
            const filename = TestSetup.getTestFilename('_attrs_numeric_edge');
            
            if (mockMode) {
                const nc = new NetCDF4(filename, 'w');
                nc.setncattr('zero_value', 0);
                nc.setncattr('negative_value', -123.456);
                expect(nc.getncattr('zero_value')).toBe(0);
                expect(nc.getncattr('negative_value')).toBe(-123.456);
                return;
            }

            try {
                const nc = await Dataset(filename, 'w');
                
                // Test edge case numeric values
                nc.setncattr('zero_value', 0);
                nc.setncattr('negative_value', -123.456);
                nc.setncattr('very_small', 1e-10);
                nc.setncattr('very_large', 1e10);
                nc.setncattr('infinity', Infinity);
                nc.setncattr('negative_infinity', -Infinity);
                
                expect(nc.getncattr('zero_value')).toBe(0);
                expect(nc.getncattr('negative_value')).toBe(-123.456);
                expect(nc.getncattr('very_small')).toBe(1e-10);
                expect(nc.getncattr('very_large')).toBe(1e10);
                expect(nc.getncattr('infinity')).toBe(Infinity);
                expect(nc.getncattr('negative_infinity')).toBe(-Infinity);
                
                await nc.close();
            } finally {
                TestSetup.cleanupTestFile(filename);
            }
        });

        test('should handle long attribute names and values', async () => {
            const filename = TestSetup.getTestFilename('_attrs_long');
            
            if (mockMode) {
                const nc = new NetCDF4(filename, 'w');
                const longName = 'a'.repeat(1000);
                const longValue = 'b'.repeat(2000);
                nc.setncattr(longName, longValue);
                expect(nc.getncattr(longName)).toBe(longValue);
                return;
            }

            try {
                const nc = await Dataset(filename, 'w');
                
                // Test long attribute names and values
                const long_name = 'very_long_attribute_name_' + 'x'.repeat(100);
                const long_value = 'This is a very long attribute value. ' + 'Lorem ipsum dolor sit amet. '.repeat(50);
                
                nc.setncattr(long_name, long_value);
                expect(nc.getncattr(long_name)).toBe(long_value);
                
                // Test in variable context
                await nc.createDimension('x', 5);
                const var_obj = await nc.createVariable('test', 'f4', ['x']);
                
                var_obj.setncattr(long_name, long_value);
                expect(var_obj.getncattr(long_name)).toBe(long_value);
                
                await nc.close();
            } finally {
                TestSetup.cleanupTestFile(filename);
            }
        });
    });

    describe('Attribute Type Coercion', () => {
        test('should handle type coercion for numeric attributes', async () => {
            const filename = TestSetup.getTestFilename('_attrs_coercion');
            
            if (mockMode) {
                const nc = new NetCDF4(filename, 'w');
                nc.setncattr('string_number', '123');
                nc.setncattr('boolean_true', true);
                nc.setncattr('boolean_false', false);
                
                expect(nc.getncattr('string_number')).toBe('123');
                expect(nc.getncattr('boolean_true')).toBe(true);
                expect(nc.getncattr('boolean_false')).toBe(false);
                return;
            }

            try {
                const nc = await Dataset(filename, 'w');
                
                // Test various input types
                nc.setncattr('string_number', '123');
                nc.setncattr('boolean_true', true);
                nc.setncattr('boolean_false', false);
                nc.setncattr('null_value', null);
                nc.setncattr('undefined_value', undefined);
                
                // Values should be stored as-is (our current implementation)
                expect(nc.getncattr('string_number')).toBe('123');
                expect(nc.getncattr('boolean_true')).toBe(true);
                expect(nc.getncattr('boolean_false')).toBe(false);
                expect(nc.getncattr('null_value')).toBe(null);
                expect(nc.getncattr('undefined_value')).toBe(undefined);
                
                await nc.close();
            } finally {
                TestSetup.cleanupTestFile(filename);
            }
        });
    });

    describe('CF Convention Attributes', () => {
        test('should support common CF convention attributes', async () => {
            const filename = TestSetup.getTestFilename('_attrs_cf');
            
            if (mockMode) {
                pending('WASM module not available');
                return;
            }

            try {
                const nc = await Dataset(filename, 'w');
                
                // Global CF attributes
                nc.setncattr('Conventions', 'CF-1.8');
                nc.setncattr('title', 'Climate and Forecast Example');
                nc.setncattr('institution', 'Test Institution');
                nc.setncattr('source', 'Model output');
                nc.setncattr('history', new Date().toISOString() + ' created by netcdf4-wasm tests');
                nc.setncattr('references', 'CF Conventions Document');
                nc.setncattr('comment', 'Example of CF convention usage');
                
                await nc.createDimension('time', null);
                await nc.createDimension('lat', 18);
                await nc.createDimension('lon', 36);
                
                // Time coordinate variable with CF attributes
                const time = await nc.createVariable('time', 'f8', ['time']);
                time.standard_name = 'time';
                time.long_name = 'time';
                time.units = 'days since 1990-01-01 00:00:00';
                time.calendar = 'gregorian';
                time.axis = 'T';
                
                // Spatial coordinate variables
                const lat = await nc.createVariable('lat', 'f4', ['lat']);
                lat.standard_name = 'latitude';
                lat.long_name = 'latitude';
                lat.units = 'degrees_north';
                lat.axis = 'Y';
                
                const lon = await nc.createVariable('lon', 'f4', ['lon']);
                lon.standard_name = 'longitude';
                lon.long_name = 'longitude';
                lon.units = 'degrees_east';
                lon.axis = 'X';
                
                // Data variable with CF attributes
                const temp = await nc.createVariable('air_temperature', 'f4', ['time', 'lat', 'lon']);
                temp.standard_name = 'air_temperature';
                temp.long_name = 'Near-Surface Air Temperature';
                temp.units = 'K';
                temp.setncattr('cell_methods', 'time: mean');
                temp.setncattr('coordinates', 'lat lon');
                temp._FillValue = -9999.0;
                temp.setncattr('missing_value', -9999.0);
                
                // Verify CF attributes
                expect(nc.getncattr('Conventions')).toBe('CF-1.8');
                expect(time.getncattr('calendar')).toBe('gregorian');
                expect(temp.standard_name).toBe('air_temperature');
                expect(temp.getncattr('cell_methods')).toBe('time: mean');
                
                await nc.close();
            } finally {
                TestSetup.cleanupTestFile(filename);
            }
        });
    });
});